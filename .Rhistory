)
# Function to create dummy variables for categories based on the presence of certain patterns
create_dummy_vars <- function(df, patterns) {
for (category in names(patterns)) {
pattern <- patterns[[category]]
df[[category]] <- as.integer(sapply(df$reason, function(x) {
any(sapply(pattern, function(y) str_detect(x, regex(y, ignore_case = TRUE))))
}))
}
return(df)
}
our_interest_temp<- our_interest
# Apply the function to the data frame
our_interest <- create_dummy_vars(data, patterns)
# Ensure these columns exist in your our_interest dataframe
selected_columns <- c("Intellectual_Property_Violations", "Research_Integrity_and_Quality_Issues",
"Peer_Review_and_Editorial_Concerns", "Policy_and_Legal_Concerns",
"Publication_and_Communication_Issues", "Investigations_and_Actions",
"Miscellaneous_Issues")
# Check if all selected columns are present in our_interest
if(all(selected_columns %in% names(our_interest))) {
# Select only the specified dummy variable columns
dummy_data <- our_interest[, selected_columns]
# Calculate the correlation matrix
cor_matrix <- cor(dummy_data, use = "complete.obs") # use complete.obs to handle NA values
# Melt the correlation matrix for visualization
melted_cor_matrix <- reshape2::melt(cor_matrix)
# Plot the correlation matrix with numbers
ggplot(data = melted_cor_matrix, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(label = round(value, 2)), color = "black", size = 3) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_blank())
} else {
stop("Not all specified columns exist in the dataframe.")
}
our_interest<- our_interest_temp
# Define business-related subjects
business_subjects <- c("Business - Management",
"Business - Economics",
"Business - Marketing",
"Business - General",
"Business - Manufacturing",
"Business - Accounting")
# Create a single pattern string for matching
pattern <- paste(business_subjects, collapse = "|")
# This is the Business related subjects
data_business <- data %>%
filter(str_detect(subject, pattern))
# This is the Non Business related subjects
data_nonbusiness <- data %>%
filter(!str_detect(subject, pattern))
data_temp<- data
# Prepare data
yearly_data <- data_business %>%
group_by(retraction_year) %>%
summarize(average_duration = mean(duration_in_months, na.rm = TRUE),
retraction_count = n())
# Normalize the RetractionCount for better visualization
max_duration <- max(yearly_data$average_duration, na.rm = TRUE)
max_count <- max(yearly_data$retraction_count, na.rm = TRUE)
yearly_data$NormalizedCount <- yearly_data$retraction_count / max_count * max_duration
retractions_management<- ggplot(yearly_data, aes(x = retraction_year)) +
geom_line(aes(y = average_duration, group = 1), color = "blue") +
geom_point(aes(y = average_duration), color = "blue") +
geom_bar(aes(y = NormalizedCount), stat = "identity", fill = "red", alpha = 0.5) +
scale_x_continuous(limits = c(1990, NA)) +  # Limiting x-axis to start from 1970+
scale_y_continuous(name = "Average Duration in Months",
sec.axis = sec_axis(~ . * max_count / max_duration,
name = "Number of Retractions")) +
labs(title = "Retractions over the Years: Duration and Count (Management Disciplines)",
x = "Retraction Year") +
theme_minimal()
grid.arrange(retractions_management, retractions_nonmanagement, ncol = 1)
# Prepare data
yearly_data <- data_business %>%
group_by(retraction_year) %>%
summarize(average_duration = mean(duration_in_months, na.rm = TRUE),
retraction_count = n())
# Normalize the RetractionCount for better visualization
max_duration <- max(yearly_data$average_duration, na.rm = TRUE)
max_count <- max(yearly_data$retraction_count, na.rm = TRUE)
yearly_data$NormalizedCount <- yearly_data$retraction_count / max_count * max_duration
retractions_management<- ggplot(yearly_data, aes(x = retraction_year)) +
geom_line(aes(y = average_duration, group = 1), color = "blue") +
geom_point(aes(y = average_duration), color = "blue") +
geom_bar(aes(y = NormalizedCount), stat = "identity", fill = "red", alpha = 0.5) +
scale_x_continuous(limits = c(1990, NA)) +  # Limiting x-axis to start from 1970+
scale_y_continuous(name = "Average Duration in Months",
sec.axis = sec_axis(~ . * max_count / max_duration,
name = "Number of Retractions")) +
labs(title = "Retractions over the Years: Duration and Count (Management Disciplines)",
x = "Retraction Year") +
theme_minimal()
grid.arrange(retractions_management, retractions_nonmanagement, ncol = 1)
retractions_management
# Prepare data
yearly_data <- data_nonbusiness %>%
group_by(retraction_year) %>%
summarize(average_duration = mean(duration_in_months, na.rm = TRUE),
retraction_count = n())
# Normalize the RetractionCount for better visualization
max_duration <- max(yearly_data$average_duration, na.rm = TRUE)
max_count <- max(yearly_data$retraction_count, na.rm = TRUE)
yearly_data$NormalizedCount <- yearly_data$retraction_count / max_count * max_duration
retractions_nonmanagement<- ggplot(yearly_data, aes(x = retraction_year)) +
geom_line(aes(y = average_duration, group = 1), color = "blue") +
geom_point(aes(y = average_duration), color = "blue") +
geom_bar(aes(y = NormalizedCount), stat = "identity", fill = "red", alpha = 0.5) +
scale_x_continuous(limits = c(1990, NA)) +  # Limiting x-axis to start from 1970+
scale_y_continuous(name = "Average Duration in Months",
sec.axis = sec_axis(~ . * max_count / max_duration,
name = "Number of Retractions")) +
labs(title = "Retractions over the Years: Duration and Count (Non Management Disciplines)",
x = "Retraction Year") +
theme_minimal()
grid.arrange(retractions_management, retractions_nonmanagement, ncol = 1)
# Separate the subjects into individual rows
data_subjects <- data_nonbusiness %>%
separate_rows(subject, sep = ";\\s*")
# Count the occurrences of each subject
subject_count <- data_subjects %>%
count(subject, sort = TRUE)
# Create a horizontal bar chart
ggplot(subject_count, aes(y = reorder(subject, n), x = n)) +
geom_bar(stat = "identity", position = "dodge") +
theme(axis.text.y = element_text(size = 4)) +
labs(y = "Subject", x = "Count", title = "Distribution of Subjects - Non Management")
# Rename the subject to the broader theme that's written in the brackets
subject_count <- subject_count %>%
mutate(subject = str_match(subject, "\\(([^)]+)\\)")[,2])
# Remove NA values that might have been introduced if there were subjects without brackets
subject_count <- subject_count %>%
filter(!is.na(subject))
# Create a horizontal bar chart
ggplot(subject_count, aes(y = reorder(subject, n), x = n)) +
geom_bar(stat = "identity", position = "dodge") +
theme(axis.text.y = element_text(size = 6)) +
labs(y = "Subject", x = "Count", title = "Distribution of Subjects - Non Management Subjects")
# Separate the subjects into individual rows
data_subjects <- data_business %>%
separate_rows(subject, sep = ";\\s*")
# Count the occurrences of each subject
subject_count <- data_subjects %>%
count(subject, sort = TRUE)
# Create a horizontal bar chart
ggplot(subject_count, aes(y = reorder(subject, n), x = n)) +
geom_bar(stat = "identity", position = "dodge") +
theme(axis.text.y = element_text(size = 4)) +
labs(y = "Subject", x = "Count", title = "Distribution of Subjects - Management")
# Rename the subject to the broader theme that's written in the brackets
subject_count <- subject_count %>%
mutate(subject = str_match(subject, "\\(([^)]+)\\)")[,2])
# Remove NA values that might have been introduced if there were subjects without brackets
subject_count <- subject_count %>%
filter(!is.na(subject))
# Create a horizontal bar chart
ggplot(subject_count, aes(y = reorder(subject, n), x = n)) +
geom_bar(stat = "identity", position = "dodge") +
theme(axis.text.y = element_text(size = 6)) +
labs(y = "Subject", x = "Count", title = "Distribution of Subjects")
# Separate the subjects into individual rows
data_country <- data_nonbusiness %>%
separate_rows(country, sep = ";\\s*")
# Count the occurrences of each subject
country_count <- data_country %>%
count(country, sort = TRUE)
# Create a horizontal bar chart
ggplot(country_count, aes(y = reorder(country, n), x = n)) +
geom_bar(stat = "identity", position = "dodge") +
theme(axis.text.y = element_text(size = 4)) +
labs(y = "Country", x = "Count", title = "Distribution of Countries - Non Management")
length(unique(country_count$country))
# Separate the subjects into individual rows
data_country <- data_business %>%
separate_rows(country, sep = ";\\s*")
# Count the occurrences of each subject
country_count <- data_country %>%
count(country, sort = TRUE)
# Create a horizontal bar chart
ggplot(country_count, aes(y = reorder(country, n), x = n)) +
geom_bar(stat = "identity", position = "dodge") +
theme(axis.text.y = element_text(size = 4)) +
labs(y = "Country", x = "Count", title = "Distribution of Countries - Non Management")
length(unique(country_count$country))
# Separate the subjects into individual rows
data_institution <- data_nonbusiness %>%
separate_rows(institution, sep = ";\\s*")
# Count the occurrences of each subject
institution_count <- data_institution %>%
count(institution, sort = TRUE)
length(unique(institution_count$institution))
# Separate the subjects into individual rows
data_institution <- data_business %>%
separate_rows(institution, sep = ";\\s*")
# Count the occurrences of each subject
institution_count <- data_institution %>%
count(institution, sort = TRUE)
length(unique(institution_count$institution))
# Separate the subjects into individual rows
data_author <- data_nonbusiness %>%
separate_rows(author, sep = ";\\s*")
# Count the occurrences of each subject
author_count <- data_author %>%
count(author, sort = TRUE)
author_count_nonbusiness <-author_count
length(unique(author_count$author))
length(unique(author_count$author))/length(data_nonbusiness$record_id)
length(unique(author_count$author))/length(data_nonbusiness$record_id)
# Step 1: Add a column with the number of authors per publication
data_nonbusiness <- data_nonbusiness %>%
mutate(
num_authors = sapply(strsplit(as.character(author), ";"), length),
publication_year = year(original_paper_date)
)
# Step 2: Group by publication year and calculate the average number of authors
average_authors_per_year <- data_nonbusiness %>%
group_by(publication_year) %>%
summarise(average_authors = mean(num_authors, na.rm = TRUE))
# Plotting the average number of authors per year
ggplot(average_authors_per_year, aes(x = publication_year, y = average_authors)) +
geom_line() +  # Line plot
geom_point() + # Adding points to each year
theme_minimal() +
labs(
title = "Average Number of Authors per Publication Over Years",
x = "Publication Year",
y = "Average Number of Authors"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1) # Adjusting x-axis labels for better readability
)+
scale_x_continuous(limits = c(1990, max(average_authors_per_year$publication_year))) # Limiting x-axis from 1980 onward
# Step 1: Add a column with the number of authors per publication
data_business <- data_business %>%
mutate(
num_authors = sapply(strsplit(as.character(author), ";"), length),
publication_year = year(original_paper_date)
)
# Step 2: Group by publication year and calculate the average number of authors
average_authors_per_year <- data_business %>%
group_by(publication_year) %>%
summarise(average_authors = mean(num_authors, na.rm = TRUE))
# Plotting the average number of authors per year
ggplot(average_authors_per_year, aes(x = publication_year, y = average_authors)) +
geom_line() +  # Line plot
geom_point() + # Adding points to each year
theme_minimal() +
labs(
title = "Average Number of Authors per Publication Over Years",
x = "Publication Year",
y = "Average Number of Authors"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1) # Adjusting x-axis labels for better readability
)+
scale_x_continuous(limits = c(1990, max(average_authors_per_year$publication_year))) # Limiting x-axis from 1980 onward
# Prepare nonbusiness data
data_nonbusiness <- data_nonbusiness %>%
mutate(
num_authors = sapply(strsplit(as.character(author), ";"), length),
publication_year = year(original_paper_date),
type = "Nonbusiness"
)
# Prepare business data
data_business <- data_business %>%
mutate(
num_authors = sapply(strsplit(as.character(author), ";"), length),
publication_year = year(original_paper_date),
type = "Business"
)
# Combine the datasets
combined_data <- bind_rows(data_nonbusiness, data_business)
# Group by publication year and type, then calculate the average number of authors
average_authors_per_year_type <- combined_data %>%
group_by(publication_year, type) %>%
summarise(average_authors = mean(num_authors, na.rm = TRUE))
# Plotting the average number of authors per year for both types
ggplot(average_authors_per_year_type, aes(x = publication_year, y = average_authors, color = type)) +
geom_line() +  # Line plot
geom_point() + # Adding points to each year
theme_minimal() +
labs(
title = "Average Number of Authors per Retracted Publication Over Years",
x = "Publication Year",
y = "Average Number of Authors"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1) # Adjusting x-axis labels for better readability
)+
scale_x_continuous(limits = c(1990, max(average_authors_per_year_type$publication_year))) #
# Prepare data
yearly_data <- ret_int_abdc %>%
group_by(retraction_year) %>%
summarize(average_duration = mean(duration_in_months, na.rm = TRUE),
retraction_count = n())
# Normalize the RetractionCount for better visualization
max_duration <- max(yearly_data$average_duration, na.rm = TRUE)
max_count <- max(yearly_data$retraction_count, na.rm = TRUE)
yearly_data$NormalizedCount <- yearly_data$retraction_count / max_count * max_duration
retractions_management<- ggplot(yearly_data, aes(x = retraction_year)) +
geom_line(aes(y = average_duration, group = 1), color = "blue") +
geom_point(aes(y = average_duration), color = "blue") +
geom_bar(aes(y = NormalizedCount), stat = "identity", fill = "red", alpha = 0.5) +
scale_x_continuous(limits = c(2000, NA)) +
scale_y_continuous(name = "Average Duration in Months",
sec.axis = sec_axis(~ . * max_count / max_duration,
name = "Number of Retractions")) +
labs(title = "Retractions over the Years: Duration and Count (ABDC)",
x = "Retraction Year") +
theme(
plot.title = element_text(hjust = 0.5),  # Center-align the title
plot.subtitle = element_text(hjust = 0.5),  # Center-align the subtitle if you have one
axis.title.x = element_text(hjust = 0.5)  # Center-align the x-axis label
)
retractions_management
# Expand the dataset so each row represents a record-author combination
expanded_dataset <- ret_int_abdc %>%
separate_rows(author, sep = ";") %>%
mutate(author = trimws(author))  # Remove any leading/trailing whitespace
# Count the number of retractions for each author
author_retraction_counts <- expanded_dataset %>%
group_by(author) %>%
summarise(retraction_count = n()) %>%
filter(author != "")  # Remove empty author entries if any
# Define a threshold for the maximum number of retractions per author
threshold = 10  # Adjust this number based on your data and needs
# Filter the data to exclude outliers
filtered_author_retraction_counts <- author_retraction_counts %>%
filter(retraction_count <= threshold)
ggplot(filtered_author_retraction_counts, aes(x = retraction_count)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = paste("Distribution of Retractions per Author (Limited to", threshold, "Retractions)"),
x = "Number of Retractions",
y = "Count of Authors") +
theme_minimal()
View(filtered_author_retraction_counts)
# Separate the subjects into individual rows
data_country <- our_interest %>%
separate_rows(country, sep = ";\\s*")
# Separate the countries into individual rows
data_country <- our_interest %>%
separate_rows(country, sep = ";\\s*")
# Ensure the 'country' column is a character vector if it is not already
our_interest <- our_interest %>%
mutate(country = as.character(country))
View(our_interest)
# Ensure the 'country' column is a character vector if it is not already
our_interest <- ret_int_abdc %>%
mutate(country = as.character(country))
# Assuming 'country' is a column where countries are separated by semicolons (and possibly followed by spaces)
data_country <- our_interest %>%
separate_rows(country, sep = ";\\s*") # sep regex matches a semicolon followed by any number of spaces
# Count the occurrences of each country
country_count <- data_country %>%
count(country, sort = TRUE)
# Create a horizontal bar chart
ggplot(country_count, aes(x = reorder(country, n), y = n)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flip the coordinates to make the bars horizontal
theme(axis.text.x = element_text(size = 12)) +  # Adjust the size if needed
labs(x = "Country", y = "Count", title = "Distribution of Countries")
# Ensure the 'country' column is a character vector if it is not already
our_interest <- ret_int_abdc %>%
mutate(country = as.character(country))
# Assuming 'country' is a column where countries are separated by semicolons (and possibly followed by spaces)
data_country <- our_interest %>%
separate_rows(country, sep = ";\\s*") # sep regex matches a semicolon followed by any number of spaces
# Count the occurrences of each country
country_count <- data_country %>%
count(country, sort = TRUE)
# Create a horizontal bar chart
ggplot(country_count, aes(x = reorder(country, n), y = n)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flip the coordinates to make the bars horizontal
theme(axis.text.x = element_text(size = 8)) +  # Adjust the size if needed
labs(x = "Country", y = "Count", title = "Distribution of Countries")
# Ensure the 'country' column is a character vector if it is not already
our_interest <- ret_int_abdc %>%
mutate(country = as.character(country))
# Assuming 'country' is a column where countries are separated by semicolons (and possibly followed by spaces)
data_country <- our_interest %>%
separate_rows(country, sep = ";\\s*") # sep regex matches a semicolon followed by any number of spaces
# Count the occurrences of each country
country_count <- data_country %>%
count(country, sort = TRUE)
# Create a horizontal bar chart
ggplot(country_count, aes(x = reorder(country, n), y = n)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flip the coordinates to make the bars horizontal
theme(axis.text.x = element_text(size = 5)) +  # Adjust the size if needed
labs(x = "Country", y = "Count", title = "Distribution of Countries")
# Ensure the 'country' column is a character vector if it is not already
our_interest <- ret_int_abdc %>%
mutate(country = as.character(country))
# Assuming 'country' is a column where countries are separated by semicolons (and possibly followed by spaces)
data_country <- our_interest %>%
separate_rows(country, sep = ";\\s*") # sep regex matches a semicolon followed by any number of spaces
# Count the occurrences of each country
country_count <- data_country %>%
count(country, sort = TRUE)
# Create a horizontal bar chart
ggplot(country_count, aes(x = reorder(country, n), y = n)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flip the coordinates to make the bars horizontal
theme(axis.text.x = element_text(size = 12),axis.text.y = element_text(size = 8)) +  # Adjust the size if needed
labs(x = "Country", y = "Count", title = "Distribution of Countries")
# Ensure the 'country' column is a character vector if it is not already
our_interest <- ret_int_abdc %>%
mutate(country = as.character(country))
# Assuming 'country' is a column where countries are separated by semicolons (and possibly followed by spaces)
data_country <- our_interest %>%
separate_rows(country, sep = ";\\s*") # sep regex matches a semicolon followed by any number of spaces
# Count the occurrences of each country
country_count <- data_country %>%
count(country, sort = TRUE)
# Create a horizontal bar chart
ggplot(country_count, aes(x = reorder(country, n), y = n)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flip the coordinates to make the bars horizontal
theme(axis.text.x = element_text(size = 12),axis.text.y = element_text(size = 6)) +  # Adjust the size if needed
labs(x = "Country", y = "Count", title = "Distribution of Countries")
# Create a data frame where each row represents a single author for a given record_id
author_records <- our_interest %>%
separate_rows(author, sep = ";") %>%
distinct(record_id, author)
# Create a square matrix of authors, initialized to zero
unique_authors <- sort(unique(author_records$author))
coauthor_retraction_matrix <- matrix(0, nrow = length(unique_authors), ncol = length(unique_authors),
dimnames = list(unique_authors, unique_authors))
# Fill the matrix with 1's where authors share a record_id
for (i in seq_len(nrow(author_records))) {
for (j in seq_len(nrow(author_records))) {
if (author_records$record_id[i] == author_records$record_id[j]) {
coauthor_retraction_matrix[author_records$author[i], author_records$author[j]] <- 1
}
}
}
# Remove self-loops if desired (authors compared with themselves)
diag(coauthor_retraction_matrix) <- 0
# Create a new data frame that pairs each author with their country
author_country_df <- ret_int_abdc %>%
rowwise() %>%
mutate(author_list = strsplit(author, ";")[[1]],
country_list = strsplit(country, ";")[[1]]) %>%
ungroup() %>%
mutate(longest_list = pmax(length(author_list), length(country_list), na.rm = TRUE)) %>%
pmap_df(.l = list(author_list, country_list, longest_list), .f = function(author, country, len) {
tibble(
author = if (length(author) < len) rep(author, len) else author,
country = if (length(country) < len) rep(country, len) else country
)
}) %>%
select(-longest_list)
authors_list <- expanded_dataset %>%
select(author) %>%
unique()
# Create a new data frame that pairs each author with their country
author_country_df <- ret_int_abdc %>%
rowwise() %>%
mutate(author_list = strsplit(author, ";")[[1]],
country_list = strsplit(country, ";")[[1]]) %>%
ungroup() %>%
mutate(longest_list = pmax(length(author_list), length(country_list), na.rm = TRUE)) %>%
pmap_df(.l = list(author_list, country_list, longest_list), .f = function(author, country, len) {
tibble(
author = if (length(author) < len) rep(author, len) else author,
country = if (length(country) < len) rep(country, len) else country
)
}) %>%
select(-longest_list)
author_list <- expanded_dataset %>%
select(author) %>%
unique()
# Create a new data frame that pairs each author with their country
author_country_df <- ret_int_abdc %>%
rowwise() %>%
mutate(author_list = strsplit(author, ";")[[1]],
country_list = strsplit(country, ";")[[1]]) %>%
ungroup() %>%
mutate(longest_list = pmax(length(author_list), length(country_list), na.rm = TRUE)) %>%
pmap_df(.l = list(author_list, country_list, longest_list), .f = function(author, country, len) {
tibble(
author = if (length(author) < len) rep(author, len) else author,
country = if (length(country) < len) rep(country, len) else country
)
}) %>%
select(-longest_list)
library(dplyr)
library(tidyr)
library(purrr)
# Assuming ret_int_abdc is your dataframe and it has 'author' and 'country' columns
author_country_df <- ret_int_abdc %>%
rowwise() %>%
mutate(
author_list = strsplit(author, ";\\s*"),
country_list = strsplit(country, ";\\s*")
) %>%
ungroup() %>%
mutate(
longest_list = pmax(length(author_list), length(country_list), na.rm = TRUE)
) %>%
pmap_df(.l = list(author_list, country_list, longest_list), .f = function(author_list, country_list, len) {
if (length(country_list) == 1 && len > 1) {
country_list <- rep(country_list, len)
}
tibble(author = unlist(author_list), country = unlist(country_list))
})
